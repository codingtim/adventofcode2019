import org.junit.jupiter.api.Test
import kotlin.test.assertEquals

class Day05Test {
    @Test
    internal fun opcodeTest() {
        assertEquals("2,0,0,0,99", opcode(split("1,0,0,0,99"), 1))
        assertEquals("2,3,0,6,99", opcode(split("2,3,0,3,99"), 1))
        assertEquals("2,4,4,5,99,9801", opcode(split("2,4,4,5,99,0"), 1))
        assertEquals("30,1,1,4,2,5,6,0,99", opcode(split("1,1,1,4,99,5,6,0,99"), 1))
    }
    @Test
    internal fun paramMode() {
        assertEquals("1101,100,-1,4,99", opcode(split("1101,100,-1,4,0"), 1))
    }
    @Test
    internal fun inputOutput() {
        assertEquals("1,0,4,0,99", opcode(split("3,0,4,0,99"), 1))
    }
    @Test
    internal fun lessThanEqualsOperations() {
        opcode(split("3,9,8,9,10,9,4,9,99,-1,8"), 8)
        assertEquals(1, lastValue)
        opcode(split("3,9,7,9,10,9,4,9,99,-1,8"), 7)
        assertEquals(1, lastValue)
        opcode(split("3,3,1108,-1,8,3,4,3,99"), 8)
        assertEquals(1, lastValue)
        opcode(split("3,3,1107,-1,8,3,4,3,99"), 5)
        assertEquals(1, lastValue)
    }
    @Test
    internal fun jump() {
        opcode(split("3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9"), 0)
        assertEquals(0, lastValue)
        opcode(split("3,3,1105,-1,9,1101,0,0,12,4,12,99,1"), 0)
        assertEquals(0, lastValue)
    }
    @Test
    internal fun complex() {
        val complex = "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31," +
                "1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104," +
                "999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99"
        opcode(split(complex), 7)
        assertEquals(999, lastValue)
        opcode(split(complex), 8)
        assertEquals(1000, lastValue)
        opcode(split(complex), 9)
        assertEquals(1001, lastValue)
    }
    @Test
    internal fun task1() {
        opcode(split("3,225,1,225,6,6,1100,1,238,225,104,0,1001,92,74,224,1001,224,-85,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1101,14,63,225,102,19,83,224,101,-760,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1101,21,23,224,1001,224,-44,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1102,40,16,225,1102,6,15,225,1101,84,11,225,1102,22,25,225,2,35,96,224,1001,224,-350,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1101,56,43,225,101,11,192,224,1001,224,-37,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1002,122,61,224,1001,224,-2623,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1,195,87,224,1001,224,-12,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1101,75,26,225,1101,6,20,225,1102,26,60,224,101,-1560,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,677,226,224,102,2,223,223,1006,224,329,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,344,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,359,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,389,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,404,101,1,223,223,1107,226,226,224,1002,223,2,223,1005,224,419,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,434,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,449,101,1,223,223,107,677,677,224,102,2,223,223,1005,224,464,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,479,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,494,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,524,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,539,1001,223,1,223,7,677,226,224,1002,223,2,223,1005,224,554,101,1,223,223,1108,226,226,224,1002,223,2,223,1005,224,569,101,1,223,223,107,677,226,224,102,2,223,223,1005,224,584,101,1,223,223,8,226,226,224,1002,223,2,223,1005,224,599,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,614,1001,223,1,223,7,226,226,224,102,2,223,223,1006,224,629,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,659,1001,223,1,223,1008,226,677,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226"), 1)
        print(lastValue)
    }
    @Test
    internal fun task2() {
        opcode(split("3,225,1,225,6,6,1100,1,238,225,104,0,1001,92,74,224,1001,224,-85,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1101,14,63,225,102,19,83,224,101,-760,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1101,21,23,224,1001,224,-44,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1102,40,16,225,1102,6,15,225,1101,84,11,225,1102,22,25,225,2,35,96,224,1001,224,-350,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1101,56,43,225,101,11,192,224,1001,224,-37,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1002,122,61,224,1001,224,-2623,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1,195,87,224,1001,224,-12,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1101,75,26,225,1101,6,20,225,1102,26,60,224,101,-1560,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,677,226,224,102,2,223,223,1006,224,329,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,344,101,1,223,223,7,226,677,224,102,2,223,223,1006,224,359,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,389,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,404,101,1,223,223,1107,226,226,224,1002,223,2,223,1005,224,419,1001,223,1,223,1007,677,677,224,102,2,223,223,1006,224,434,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,449,101,1,223,223,107,677,677,224,102,2,223,223,1005,224,464,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,479,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,494,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,524,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,539,1001,223,1,223,7,677,226,224,1002,223,2,223,1005,224,554,101,1,223,223,1108,226,226,224,1002,223,2,223,1005,224,569,101,1,223,223,107,677,226,224,102,2,223,223,1005,224,584,101,1,223,223,8,226,226,224,1002,223,2,223,1005,224,599,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,614,1001,223,1,223,7,226,226,224,102,2,223,223,1006,224,629,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,644,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,659,1001,223,1,223,1008,226,677,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226"), 5)
    }

    private fun split(s: String): MutableList<Int> {
        return s.split(",").map { Integer.parseInt(it) }.toMutableList()
    }

    private fun opcode(data: MutableList<Int>, input: Int): String {
        var index = 0
        while (true) {
            index = executeValueOf(data, index, input)
            if (data[index] == 99) break
        }
        return data.joinToString(separator = ",")
    }

    private fun executeValueOf(data: MutableList<Int>, index: Int, input: Int): Int {
        fun valueOfParameter(paramMode: Int, offset: Int): Int {
            return if(paramMode == 0) data[offset] else offset
        }
        val value = data[index]
        val operation = value % 10
        val param1Mode = value / 100 % 10
        val param2Mode = value / 1000 % 100
        val param3Mode = value / 10000 % 1000
        if (operation == 1) {
            data[valueOfParameter(param3Mode, index + 3)] = data[valueOfParameter(param1Mode, index + 1)] + data[valueOfParameter(param2Mode, index + 2)]
            return index + 4
        }
        if (operation == 2) {
            data[valueOfParameter(param3Mode, index + 3)] = data[valueOfParameter(param1Mode, index + 1)] * data[valueOfParameter(param2Mode, index + 2)]
            return index + 4
        }
        if (operation == 3) {
            data[valueOfParameter(param1Mode, index + 1)] = input
            return index + 2
        }
        if (operation == 4) {
            print(data[valueOfParameter(param1Mode, index + 1)])
            return index + 2
        }
        if (operation == 5) {
            return if(data[valueOfParameter(param1Mode, index + 1)] != 0) data[valueOfParameter(param2Mode, index +2 )] else index + 3
        }
        if (operation == 6) {
            return if(data[valueOfParameter(param1Mode, index + 1)] == 0) data[valueOfParameter(param2Mode, index +2 )] else index + 3
        }
        if (operation == 7) {
            if(data[valueOfParameter(param1Mode, index + 1)] < data[valueOfParameter(param2Mode, index + 2)]) {
                data[valueOfParameter(param3Mode, index  + 3)] = 1
            } else {
                data[valueOfParameter(param3Mode, index  + 3)] = 0
            }
            return index + 4;
        }
        if (operation == 8) {
            if(data[valueOfParameter(param1Mode, index + 1)] == data[valueOfParameter(param2Mode, index + 2)]) {
                data[valueOfParameter(param3Mode, index  + 3)] = 1
            } else {
                data[valueOfParameter(param3Mode, index  + 3)] = 0
            }
            return index + 4;
        }
        throw IllegalStateException("Unknown operation $operation")
    }

    companion object Output {
        var lastValue: Int = -1
        fun print(value: Int) {
            lastValue = value
            println(value)
        }
    }
}